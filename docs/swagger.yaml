basePath: /
definitions:
  main.BookDTO:
    properties:
      author:
        example: J.K. Rowling
        type: string
      description:
        example: A wizarding world book
        type: string
      name:
        example: Harry Potter
        type: string
      price:
        example: 199
        type: integer
    type: object
  main.UserDTO:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: securePassword123
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample server for a book API.
  title: Book API
  version: "1.0"
paths:
  /books:
    get:
      consumes:
      - application/json
      description: Get details of all books
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.BookDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get all books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Create book
      parameters:
      - description: Book DTO
        in: body
        name: Book
        required: true
        schema:
          $ref: '#/definitions/main.BookDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create book
      tags:
      - books
  /books/{bookID}:
    delete:
      description: Delete book
      parameters:
      - description: Book ID
        in: path
        name: bookID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete book
      tags:
      - books
    get:
      description: Get book by ID
      parameters:
      - description: Book ID
        in: path
        name: bookID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.BookDTO'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get book
      tags:
      - books
    put:
      consumes:
      - application/json
      description: Update book
      parameters:
      - description: Book ID
        in: path
        name: bookID
        required: true
        type: integer
      - description: Book DTO
        in: body
        name: Book
        required: true
        schema:
          $ref: '#/definitions/main.BookDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update book
      tags:
      - books
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: User DTO
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/main.UserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: User login
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: User register
      parameters:
      - description: User DTO
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/main.UserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: User register
      tags:
      - auth
schemes:
- http
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
